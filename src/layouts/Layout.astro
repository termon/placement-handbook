---
import { Icon } from 'astro-icon'
import DocElements from "../components/DocElements.astro";
import DocHeader from '../components/DocHeader.astro';
import DocFooter from '../components/DocFooter.astro';
import GLOBAL from '../../global.json'
import Badge from '../components/Badge.astro';
import Link from '../components/Link.astro';

const { frontmatter, headings } = Astro.props ;
const title = frontmatter ? frontmatter.title : Astro.props.title
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body id="container">

    <div class="dark:bg-black dark:text-white p-3">
      <!-- top bar -->
      <div class="flex justify-between ml-4 mb-8 ">
        <div class="flex">
          <Icon name="logo" width="50" class="text-black dark:text-white dark:bg-black" />
          <h1 class="text-slate-900 font-bold ml-4 text-3xl dark:text-white dark:bg-black"><a href="/">SCEIS Placement Handbook</a></h1>
        </div>
        <div class="flex content-center gap-2">
          <button id="toggleButton" onclick="toggle()" class="text-black bg-gray-200 dark:text-white px-2 dark:bg-gray-600 focus:outline-none focus:ring-1 rounded opacity-80 hover:opacity-100" /> 
          <Badge>
              <Icon name="carbon:version" width="20" class="mr-2 text-blue-900 dark:text-white dark:bg-black font-bold"/> 
              <span class="text-gray-900 dark:text-white dark:bg-black">Version&nbsp;<span>{GLOBAL.version}</span></span> 
          </Badge>        
          </div>
      </div>

      <div class="flex">
        <!-- Left Side Bar -->
        <aside class="w-64" aria-label="LeftSidebar">
          <div class="overflow-y-auto py-4 px-3 bg-gray-50 dark:bg-black rounded">
            <ul class="space-y-2">
              <li class="text-blue-900 dark:text-white font-bold">Handbook</li>
              <li>
                <Link url="/background" >
                  <Icon name="ic:baseline-batch-prediction" width="20"/>
                  <span>Background</span>
                </Link>
              </li>
              <li>
                <Link url="/introduction" >
                  <Icon name="ic:baseline-start" width="20"/>
                  <span>Introduction</span>
                </Link>
              </li>
              <li>
                <Link url="/preparation" >
                  <Icon name="ic:baseline-clean-hands" width="20"/>
                  <span>Preparation</span>
                </Link>
              </li>
              <li>
                <Link url="/on-placement" >
                  <Icon name="ic:outline-work" width="20"/>
                  <span>Placement</span>
                </Link>
              </li>             
             
              <li class="text-green-900 dark:text-white font-bold">Recruit Guidance</li>
              <li>
                <Link url="/recruit/student" >
                  <Icon name="ph:student-fill" width="20"/>
                  <span>Student</span>
                </Link>
              </li>  
              <li>
                <Link url="/recruit/academic" >
                  <Icon name="dashicons:welcome-learn-more" width="20"/>
                  <span>Academic</span>
                </Link>
              </li>                
            </ul>
          </div>
        </aside>

        <!-- Document configure prose prose-a:no-underline -->
        <article class="mx-auto prose dark:prose-invert dark:bg-black dark:prose-h2:text-slate-200 dark:prose-h3:text-slate-400 prose-h2:text-blue-900" aria-label="Content">
          <DocHeader frontmatter={frontmatter}/>
          <slot/> 
          <DocFooter frontmatter={frontmatter} modified={GLOBAL.modified}/>
        </article>

        <!-- Right Side Bar -->
        <aside class="w-64" aria-label="RightSidebar">
          <div class="overflow-y-auto py-4 px-3 bg-gray-50 dark:bg-black rounded">
            <DocElements frontmatter={frontmatter} headings={headings}/>
          </div>
        </aside>
      </div>
    </div>

    <script client:load >
      const light = `<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" preserveAspectRatio="xMidYMid meet" viewBox="0 0 16 16"><path fill="currentColor" d="M6 .278a.768.768 0 0 1 .08.858a7.208 7.208 0 0 0-.878 3.46c0 4.021 3.278 7.277 7.318 7.277c.527 0 1.04-.055 1.533-.16a.787.787 0 0 1 .81.316a.733.733 0 0 1-.031.893A8.349 8.349 0 0 1 8.344 16C3.734 16 0 12.286 0 7.71C0 4.266 2.114 1.312 5.124.06A.752.752 0 0 1 6 .278zM4.858 1.311A7.269 7.269 0 0 0 1.025 7.71c0 4.02 3.279 7.276 7.319 7.276a7.316 7.316 0 0 0 5.205-2.162c-.337.042-.68.063-1.029.063c-4.61 0-8.343-3.714-8.343-8.29c0-1.167.242-2.278.681-3.286z"/></svg>`
      const dark = `<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" preserveAspectRatio="xMidYMid meet" viewBox="0 0 16 16"><path fill="currentColor" d="M6 .278a.768.768 0 0 1 .08.858a7.208 7.208 0 0 0-.878 3.46c0 4.021 3.278 7.277 7.318 7.277c.527 0 1.04-.055 1.533-.16a.787.787 0 0 1 .81.316a.733.733 0 0 1-.031.893A8.349 8.349 0 0 1 8.344 16C3.734 16 0 12.286 0 7.71C0 4.266 2.114 1.312 5.124.06A.752.752 0 0 1 6 .278z"/></svg>`  
      
      const container = document.getElementById("container")
      const toggleButton = document.getElementById("toggleButton")
      
      // load mode from localstorage
      document.addEventListener("DOMContentLoaded", function(){
          initialiseMode()
      })

      function initialiseMode() {    
          if (getMode() === 'dark') {
              container.classList.add("dark")
              toggleButton.innerHTML = dark
          } else {
              container.classList.remove('dark')
              toggleButton.innerHTML = light
          }       
          console.log('Mode initialised to', getMode())
      }

      function toggle() {        
          // update toggle button icon to light/dark       
          if (getMode() === "light") {
              setMode("dark")
              container.classList.add("dark")
              toggleButton.innerHTML = dark
          } else {
              setMode("light")
              container.classList.remove("dark")
              toggleButton.innerHTML = light
          }
          console.log('Mode toggled to', getMode())
      }

      function getMode() {

          const mode = localStorage.getItem('mode')
          if (mode == null) {
              setMode("light")
          }
          return mode
      }

      function setMode(mode) {
          localStorage.setItem('mode', mode)
      }
    </script>

  </body>
</html>
